File: .eslintignore

node_modules
dist

File: .eslintrc.js

module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  plugins: ['simple-import-sort'],
  env: {
    node: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
    'plugin:json/recommended',
    'prettier',
  ],
  rules: {
    'prettier/prettier': ['error', {}, { usePrettierrc: true }],
    // Ignore underscore vars
    '@typescript-eslint/no-unused-vars': ['warn', { varsIgnorePattern: '^_' }],
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    'simple-import-sort/imports': 'error',
  },
};


File: .fakeIgnore

node_modules
dist

File: .gitignore

node_modules
dist

File: .prettierrc.js

module.exports = {
  semi: true,
  trailingComma: 'es5',
  singleQuote: true,
  printWidth: 100,
  tabWidth: 2,
  useTabs: false,
};


File: .vscode/launch.json

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Start script",
      "request": "launch",
      "runtimeArgs": [
        "run-script",
        "start"
      ],
      "runtimeExecutable": "npm",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "type": "node"
    },
    {
      "name": "Nodemon script",
      "request": "launch",
      "runtimeArgs": [
        "run-script",
        "nodemon"
      ],
      "runtimeExecutable": "npm",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "type": "node"
    },
  ]
}


File: .vscode/settings.json

{
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "cSpell.words": [
    "Mahedi",
    "buga",
    "bugendo",
    "codegen",
    "dirtxt",
    "hasan",
    "keynod",
    "postgres",
    "postversion",
    "preversion",
    "uga",
    "ugabuga",
    "ugendo"
  ]
}


File: README.md

# dirtxt


File: nodemon.json

{
  "watch": ["src"],
  "ext": "ts",
  "exec": "ts-node ./src/index.ts"
}


File: output.txt



File: package.json

{
  "name": "dirtxt",
  "version": "1.0.1",
  "description": "Converts your current directories and subdirectories files contents to a txt file ",
  "repository": "git@github.com:medzz123/dirtxt.git",
  "author": "Mahedi Hasan <mahedi.hs1997@gmail.com>",
  "license": "MIT",
  "private": false,
  "keywords": [
    "Directory",
    "Text",
    "Txt",
    "Project",
    "Git"
  ],
  "main": "dist/index.js",
  "files": [
    "dist/**/*"
  ],
  "bin": {
    "dirtxt": "./dist/index.js"
  },
  "scripts": {
    "nodemon": "nodemon",
    "start": "ts-node src/index.ts",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix",
    "ts": "tsc --noEmit",
    "build": "tsc",
    "prepublishOnly": "yarn lint && yarn build"
  },
  "dependencies": {
    "chalk": "^4.1.1",
    "minimist": "^1.2.5",
    "node": "^16.0.0"
  },
  "devDependencies": {
    "@types/minimist": "^1.2.1",
    "@types/node": "^15.0.1",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "eslint": "^7.25.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-json": "^2.1.2",
    "eslint-plugin-prettier": "^3.4.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "nodemon": "^2.0.7",
    "prettier": "^2.2.1",
    "ts-node": "^9.1.1",
    "typescript": "^4.2.4"
  }
}


File: src/index.ts

#!/usr/bin/env node

import chalk from 'chalk';
import fs from 'fs';
import minimist from 'minimist';

const globalIgnores = ['node_modules', '.git', 'yarn.lock', 'package-lock.json'];
const extensionsIgnores = [
  'tif',
  'tiff',
  'bmp',
  'jpg',
  'jpeg',
  'gif',
  'png',
  'eps',
  'raw',
  'cr2',
  'nef',
  'orf',
  'sr2',
  'mp4',
];

const extensionRegexMatch = /[^\\]*\.(\w+)$/;

const warning = chalk.keyword('orange');
const success = chalk.bold.keyword('green');
const info = chalk.keyword('white');

function getFiles(dir: string, ignores: string[], cwd: string, appendFiles_?: string[]) {
  const files_ = appendFiles_ || [];
  const files = fs.readdirSync(dir);

  const relativeDir = dir.replace(cwd, '');

  const matchIgnoredDirectory = ignores.filter((ignore) => relativeDir.includes(ignore));

  if (matchIgnoredDirectory.length > 0) {
    return files_;
  }

  for (const i in files) {
    const name = dir + '/' + files[i];
    if (fs.statSync(name).isDirectory()) {
      getFiles(name, ignores, cwd, files_);
    } else {
      files_.push(name);
    }
  }
  return files_;
}

const main = () => {
  const commands = minimist(process.argv);

  const currentDir = process.cwd();

  const debug = commands.debug;

  const log = debug
    ? (...args: unknown[]) => console.log(...args, '\n')
    : () => {
        //doing nothing
      };

  let gitIgnores = [];

  try {
    log(info('Looking for git ignore file'));
    gitIgnores = fs.readFileSync('.gitignore').toString().split('\n');
  } catch {
    log(warning('Could not find a gitignore file'));
  }

  const ignoreDirs =
    commands.di || commands.dontIgnore
      ? []
      : commands.i || commands.ignore
      ? [...globalIgnores, ...gitIgnores, ...(commands.i || commands.ignore || [])]
      : [...globalIgnores, ...gitIgnores];

  const ignoreExtensions = [
    ...extensionsIgnores,
    ...(commands.e || commands.extensionsIgnores || []),
  ];

  log(info(`Directories and files that will ignored`, ignoreDirs));
  log(info(`Files with extensions that will be ignored`, ignoreExtensions));

  const outputFile = commands.o || commands.output || 'output.txt';

  const files = getFiles(currentDir, ignoreDirs, currentDir);

  log(info(`List of files found\n`, files.join('\n')));

  log(info(`Removing files that match ignores`));

  log(info(`Removing files that match extensions`));

  const filteredFiles = files
    .filter((file) => !ignoreDirs.includes(file.replace(currentDir, '').substring(1)))
    .filter((file) => !ignoreExtensions.includes(file.match(extensionRegexMatch)[1]));

  log(info(`Outputting to file`, outputFile));

  try {
    fs.unlinkSync(outputFile);
  } catch {
    log(info('Removing current output file failed'));
  }

  const writeStream = fs.createWriteStream(outputFile, { flags: 'a' });

  filteredFiles.forEach((file) => {
    const content = fs.readFileSync(file);

    writeStream.write(`File: ${file.replace(currentDir, '').substring(1)}\n\n${content}\n\n`);
  });

  console.log(success(`Your output is in ${outputFile}`));
};

main();


File: tsconfig.json

{
  "ts-node": {
    "compilerOptions": {
      "module": "commonjs"
    }
  },
  "compilerOptions": {
    "target": "es3",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": false,
    "esModuleInterop": true,
    "module": "commonjs",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": false,
    "outDir": "./dist",
    "jsx": "preserve",
    "typeRoots": ["node_modules/@types"]
  },
  "include": ["**/*.ts"],
  "exclude": ["node_modules", "dist"]
}


